Author : THUMMALA SIVA KUMAR REDDY

Data Science & Business Analytics Internship at The Sparks Foundation
TASK 1 - Prediction using Supervised Machine Learning

The aim of this task is to predict the percentage of a student based on the nnumber of study hours using the Linear Regression supervised machine learning algorithm.

Steps to be followed:

Step 1 - Importing the dataset
Step 2 - Visualizing the dataset
Step 3 - Data preparation
Step 4 - Training the algorithm
Step 5 - Visualizing the model
Step 6 - Making predcitions
Step 7 - Evaluating the model

STEP 1 - Importing the dataset

*In this step, we will import the dataset *

import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
%matplotlib inline
url = "http://bit.ly/w-data"
data = pd.read_csv(url)
data.head()
Hours	Scores
0	2.5	21
1	5.1	47
2	3.2	27
3	8.5	75
4	3.5	30
8
data.tail(8)
Hours	Scores
17	1.9	24
18	6.1	67
19	7.4	69
20	2.7	30
21	4.8	54
22	3.8	35
23	6.9	76
24	7.8	86
STEP 2 - Visualizing the dataset
We will plot the dataset and check if there is any relation between the variables

data.plot(x='Hours', y='Scores', style='*', color='orange', markersize=10)  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied by students')  
plt.ylabel('Percentage Score')  
plt.grid()
plt.show()

By observing the graph we can say that there is a linear relationship between "hours studied" and "percentage score". So, we will use linear regression supervised machine model and predict the coming values.

STEP 3 - Data preparation
In this step we will divide the data into inputs and outputs. And then we will divide the whole dataset into 2 parts - testing data and training data.

X = data.iloc[:, :-1].values  
Y = data.iloc[:, 1].values
from sklearn.model_selection import train_test_split  
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, 
                            test_size=0.2, random_state=0)
STEP 4 - Training the Algorithm
We have split our data into training and testing sets, and now is finally the time to train our algorithm.

from sklearn.linear_model import LinearRegression  
​
model = LinearRegression()  
model.fit(X_train, Y_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)
STEP 5 - Visualizing the model
Visualizing the model after training it

orange
line = model.coef_*X + model.intercept_
​
# Plotting for the training data
plt.scatter(X_train, Y_train, color='blue')
plt.plot(X, line, color='orange');
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score') 
plt.grid()
plt.show()

pink
plt.scatter(X_test, Y_test, color='green')
plt.plot(X, line, color='pink');
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score') 
plt.grid()
plt.show()

STEP 6 - Making Predictions
After training the algorithm, it's time to make some predictions.

Y_predicted = model.predict(X_test)
df = pd.DataFrame({'Actual score': Y_test, 'Predicted score': Y_predicted})  
df
Actual score	Predicted score
0	20	16.884145
1	27	33.732261
2	69	75.357018
3	30	26.794801
4	62	60.491033
hrs = 9.25
own_prediction = model.predict([[hrs]])
print("The predicted score if a person studies for",hrs,"hours is",own_prediction[0])
The predicted score if a person studies for 9.25 hours is 93.69173248737538
If a student students for 9.25 hours then the predicted score is 93.69173248737539

STEP 7 - Evaluating the model
Final step ,we are going to evaluate our trained model by calculating mean absolute error

from sklearn import metrics  
​
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_predicted))
Mean Absolute Error: 4.183859899002975
The Mean Absolute Error is 4.183859899002982

​